Copyright (c) Microsoft Corporation.
Licensed under the MIT License.

diff --git a/src/collectives/device/sendrecv.h b/src/collectives/device/sendrecv.h
index e5e948f..73adac0 100644
--- a/src/collectives/device/sendrecv.h
+++ b/src/collectives/device/sendrecv.h
@@ -7,6 +7,9 @@
 #include "devcomm.h"
 #include "collectives.h"
 #include "primitives.h"
+#if defined(ENABLE_NPKIT)
+#include "npkit/npkit.h"
+#endif
 
 template<typename T, typename RedOp>
 struct RunWork<ncclFuncSendRecv, T, RedOp, NCCL_ALGO_RING, NCCL_PROTO_SIMPLE> {
@@ -36,28 +39,117 @@ struct RunWork<ncclFuncSendRecv, T, RedOp, NCCL_ALGO_RING, NCCL_PROTO_SIMPLE> {
         ssize_t const recvCount = args->p2p.recvCount;
         int const delta = args->p2p.delta;
 
+#if defined(ENABLE_NPKIT)
+        bool isNpKitThread = false;
+        int npKitCtxIdx = (blockIdx.x * NCCL_MAX_WORK_ELEMENTS + s) * 2;
+        if (tid == 0) {
+          isNpKitThread = true;
+	} else if (delta != 0 && tid == nThreadsSplit) {
+          isNpKitThread = true;
+          npKitCtxIdx++;
+        }
+#endif
+
         if (delta == 0) {
           if (sendbuff != recvbuff) {
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_TIME_SYNC_CPU)
+            if (isNpKitThread) {
+              uint64_t* cpuTimestamp = ncclShmem.comm.cpuTimestamp;
+              NpKit::CollectGpuEvent(NPKIT_EVENT_TIME_SYNC_CPU, 0, 0, *cpuTimestamp,
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_TIME_SYNC_GPU)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_TIME_SYNC_GPU, 0, 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_SEND_RECV_LOCAL_COPY_ENTRY)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_SEND_RECV_LOCAL_COPY_ENTRY, sendCount*sizeof(T), 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
             // local copy : ReduceOrCopyMulti takes an int as number of elements,
             // so we split it in blocks of 1G elements.
             int blockSize = 1<<30;
             for (size_t offset=0; offset<sendCount; offset += blockSize) {
               size_t remaining = sendCount - offset;
               if (remaining < blockSize) blockSize = remaining;
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_PRIM_SIMPLE_REDUCE_OR_COPY_MULTI_ENTRY)
+              if (isNpKitThread) {
+                NpKit::CollectGpuEvent(NPKIT_EVENT_PRIM_SIMPLE_REDUCE_OR_COPY_MULTI_ENTRY, blockSize*sizeof(T), 0, clock64(),
+                    ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+              }
+#endif
+
               ReduceOrCopyMulti<COLL_UNROLL, RedOp, T, 1, 1, 1, 1>(tid, nThreadsSegment, RedOp(), false, false, 1, &sendbuff, 1, &recvbuff, blockSize);
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_PRIM_SIMPLE_REDUCE_OR_COPY_MULTI_EXIT)
+              if (isNpKitThread) {
+                NpKit::CollectGpuEvent(NPKIT_EVENT_PRIM_SIMPLE_REDUCE_OR_COPY_MULTI_EXIT, blockSize*sizeof(T), 0, clock64(),
+                    ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+              }
+#endif
+
               sendbuff += blockSize;
               recvbuff += blockSize;
             }
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_SEND_RECV_LOCAL_COPY_EXIT)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_SEND_RECV_LOCAL_COPY_EXIT, sendCount*sizeof(T), 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
           }
         }
         else {
           if ((tid < nThreadsSplit) && recvCount >= 0) {
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_TIME_SYNC_CPU)
+            if (isNpKitThread) {
+              uint64_t* cpuTimestamp = ncclShmem.comm.cpuTimestamp;
+              NpKit::CollectGpuEvent(NPKIT_EVENT_TIME_SYNC_CPU, 0, 0, *cpuTimestamp,
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_TIME_SYNC_GPU)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_TIME_SYNC_GPU, 0, 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
             int const peer = (rank - delta + nRanks)%nRanks;
             int const t0 = 0;
             int const nt = nThreadsSplit;
             int const chunkSize = args->p2p.recvChunkSize/sizeof(T);
             Primitives<T, RedOp, FanAsymmetric<1, 0>, 1, Proto> prims
               (tid-t0, nt, &peer, nullptr, nullptr, recvbuff, groupRecv);
+
+#if defined(ENABLE_NPKIT)
+            if (isNpKitThread) {
+              prims.npKitCtxIdx = npKitCtxIdx;
+            }
+#endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_SEND_RECV_RECV_ENTRY)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_SEND_RECV_RECV_ENTRY, recvCount*sizeof(T), 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+              prims.npKitDataProcessTotalTime = 0;
+            }
+#endif
+
             ssize_t offset = 0;
             do {
               int nelem = roundUp(chunkSize, nt*(sizeof(uint64_t)/sizeof(T)));
@@ -65,15 +157,54 @@ struct RunWork<ncclFuncSendRecv, T, RedOp, NCCL_ALGO_RING, NCCL_PROTO_SIMPLE> {
               prims.directRecv(offset, nelem);
               offset += nelem;
             } while(offset < recvCount);
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_SEND_RECV_RECV_EXIT)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_SEND_RECV_RECV_EXIT, recvCount*sizeof(T), prims.npKitDataProcessTotalTime, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
           }
 
           if ((tid >= nThreadsSplit) && sendCount >= 0) {
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_TIME_SYNC_CPU)
+            if (isNpKitThread) {
+              uint64_t* cpuTimestamp = ncclShmem.comm.cpuTimestamp;
+              NpKit::CollectGpuEvent(NPKIT_EVENT_TIME_SYNC_CPU, 0, 0, *cpuTimestamp,
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_TIME_SYNC_GPU)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_TIME_SYNC_GPU, 0, 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
             int const peer = (rank + delta)%nRanks;
             int const t0 = nThreadsSplit;
             int const nt = nThreadsSegment - nThreadsSplit;
             int const chunkSize = args->p2p.sendChunkSize/sizeof(T);
             Primitives<T, RedOp, FanAsymmetric<0, 1>, 1, Proto> prims
               (tid-t0, nt, nullptr, &peer, sendbuff, nullptr, groupSend);
+
+#if defined(ENABLE_NPKIT)
+            if (isNpKitThread) {
+              prims.npKitCtxIdx = npKitCtxIdx;
+            }
+#endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_SEND_RECV_SEND_ENTRY)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_SEND_RECV_SEND_ENTRY, sendCount*sizeof(T), 0, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+              prims.npKitDataProcessTotalTime = 0;
+            }
+#endif
+
             ssize_t offset = 0;
             do {
               int nelem = roundUp(chunkSize, nt*(sizeof(uint64_t)/sizeof(T)));
@@ -81,6 +212,14 @@ struct RunWork<ncclFuncSendRecv, T, RedOp, NCCL_ALGO_RING, NCCL_PROTO_SIMPLE> {
               prims.directSend(offset, offset, nelem);
               offset += nelem;
             } while(offset < sendCount);
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_SEND_RECV_SEND_EXIT)
+            if (isNpKitThread) {
+              NpKit::CollectGpuEvent(NPKIT_EVENT_SEND_RECV_SEND_EXIT, sendCount*sizeof(T), prims.npKitDataProcessTotalTime, clock64(),
+                  ncclShmem.comm.npKitEventCollectContexts + npKitCtxIdx);
+            }
+#endif
+
           }
         }
         break;
