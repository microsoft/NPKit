Copyright (c) Microsoft Corporation.
Licensed under the MIT License.

diff --git a/samples/npkit/run_nccl_tests_with_npkit.sh b/samples/npkit/run_nccl_tests_with_npkit.sh
new file mode 100644
index 0000000..af1ab92
--- /dev/null
+++ b/samples/npkit/run_nccl_tests_with_npkit.sh
@@ -0,0 +1,111 @@
+set -x
+
+# Function that runs nccl-tests and collect NPKit traces.
+# nccl_test
+#   <hostfile>
+#   <nccl_test_bin> <msg_size> <algorithm> <protocol> <num_warmups> <num_iters>
+#   <npkit_dump_dir> <npkit_result_dir>
+function nccl_test() {
+  mpirun \
+    --allow-run-as-root --tag-output \
+    -hostfile $2 -map-by ppr:8:node --bind-to numa \
+    -mca pml ob1 -mca btl ^openib -mca btl_tcp_if_exclude lo,docker0 -mca coll_hcoll_enable 0 -mca plm_rsh_no_tree_spawn 1 -mca plm_rsh_num_concurrent 8192 \
+    -x PATH \
+    -x NCCL_UCX_TLS=rc_x,cuda_copy,cuda_ipc \
+    -x NCCL_UCX_RNDV_THRESH=0 \
+    -x NCCL_UCX_RNDV_SCHEME=get_zcopy \
+    -x UCX_RC_MLX5_TM_ENABLE=y \
+    -x UCX_MEMTYPE_CACHE=n \
+    -x NCCL_IB_PCI_RELAXED_ORDERING=1 \
+    -x UCX_IB_PCI_RELAXED_ORDERING=on \
+    -x NCCL_NET_GDR_LEVEL=5 \
+    -x CUDA_DEVICE_ORDER=PCI_BUS_ID \
+    -x NCCL_SOCKET_IFNAME=eth0 \
+    -x NCCL_DEBUG=INFO \
+    -x NCCL_PLUGIN_P2P=ib \
+    -x NCCL_DEBUG_SUBSYS=INIT,GRAPH \
+    -x NCCL_IB_AR_THRESHOLD=0 \
+    -x NCCL_ALGO=$4 \
+    -x NCCL_PROTO=$5 \
+    -x NPKIT_DUMP_DIR=$8 \
+    $1 -b $3 -e $3 -f 2 -g 1 -c 0 -w $6 -n $7 | tee $9/log.txt
+}
+
+# Parameters that should be set by the user of this scripts.
+
+# NPKit source directory.
+npkit_src_dir="${NPKIT_SRC_DIR:-/mnt/npkit_dev/nccl}"
+
+# NPKit runtime directory, used to store logs and results.
+npkit_run_dir="${NPKIT_RUN_DIR:-/mnt/npkit_run}"
+
+# Path to nccl-tests binary being profiled.
+nccl_test_bin="${NPKIT_NCCL_TEST_BIN:-/nccl-tests-master/build/all_reduce_perf}"
+
+# Message size of NCCL operation.
+msg_size="${NPKIT_NCCL_MSG_SIZE:-16M}"
+
+# NCCL communication algorithm. Ring and Tree are supported.
+nccl_algo="${NPKIT_NCCL_ALGO:-Ring}"
+
+# NCCL communication protocol. Simple, LL, Ll128 are supported.
+nccl_proto="${NPKIT_NCCL_PROTO:-LL128}"
+
+# Number of nccl-tests warmups.
+num_warmups="${NPKIT_NCCL_NUM_WARMUPS:-200}"
+
+# Number of nccl-tests iterations.
+num_iters="${NPKIT_NCCL_NUM_ITERS:-50}"
+
+# Number of kernel runs whose results are picked by NPKit visualization tool.
+num_kernel_runs_to_sample="${NPKIT_NUM_KERNEL_RUNS_TO_SAMPLE:-10}"
+
+# NPKit pre-definitions.
+npkit_flags="${NPKIT_FLAGS:--DENABLE_NPKIT -DENABLE_NPKIT_EVENT_TIME_SYNC_CPU -DENABLE_NPKIT_EVENT_TIME_SYNC_GPU -DENABLE_NPKIT_EVENT_ALL_REDUCE_RING_ENTRY -DENABLE_NPKIT_EVENT_ALL_REDUCE_RING_EXIT}"
+
+# Parameters generated by user-defined parameters above.
+
+# Number of kernel runs that would be performed by nccl-tests.
+num_kernel_runs=$(((${num_warmups}+${num_iters}+1)*2))
+
+# Path to hostfile.
+hostfile="${npkit_src_dir}/samples/npkit/hostfile"
+
+# Path to NPKit source in runtime directory, on worker machines.
+npkit_run_src_dir="${npkit_run_dir}/npkit_src"
+
+# Tag of this NPKit run.
+npkit_run_tag=`basename ${nccl_test_bin}`"/${msg_size}/${nccl_algo}/${nccl_proto}"
+
+# Path to NPKit dump directory, on worker machines.
+npkit_dump_dir="${npkit_run_dir}/npkit_dump/${npkit_run_tag}"
+
+# Path to NPKit post-process directory, on worker machines.
+npkit_post_process_dir="${npkit_run_dir}/npkit_post_process/${npkit_run_tag}"
+
+# Path to NPKit result directory.
+npkit_result_dir="${npkit_run_dir}/npkit_result/${npkit_run_tag}"
+
+# Build NPKit on all worker nodes
+cd ${npkit_src_dir}
+make clean
+parallel-ssh -t 0 -h ${hostfile} "rm -rf ${npkit_run_dir}; mkdir -p ${npkit_dump_dir}"
+parallel-scp -r -h ${hostfile} ${npkit_src_dir} ${npkit_run_src_dir}
+parallel-ssh -t 0 -h ${hostfile} "cd ${npkit_run_src_dir}; make -j src.build NPKIT_FLAGS=\"${npkit_flags}\" NVCC_GENCODE=\"-gencode=arch=compute_80,code=sm_80\"; make install"
+
+# Clean local node
+rm -rf ${npkit_result_dir}
+mkdir -p ${npkit_result_dir}
+
+# Run NPKit on all nodes.
+nccl_test ${nccl_test_bin} ${hostfile} ${msg_size} ${nccl_algo} ${nccl_proto} ${num_warmups} ${num_iters} ${npkit_dump_dir} ${npkit_result_dir}
+
+# Generate trace files on all nodes
+parallel-ssh -t 0 -h ${hostfile} "cd ${npkit_run_src_dir}/samples/npkit; python3 npkit_post_process.py --npkit_dump_dir=${npkit_dump_dir} --npkit_event_header_path=${npkit_run_src_dir}/src/include/npkit/npkit_event.h --output_dir=${npkit_post_process_dir} --num_kernel_runs=${num_kernel_runs} --num_kernel_runs_to_sample=${num_kernel_runs_to_sample}; cd ${npkit_post_process_dir}; tar cvzf npkit_result.tar.gz npkit_event_trace.json gpu_stage_durations.json cpu_stage_durations.json"
+
+# Copy trace files from worker nodes to local node
+cat ${hostfile} | while read hostname
+do
+  mkdir -p ${npkit_result_dir}/${hostname}
+  scp ${hostname}:${npkit_post_process_dir}/npkit_result.tar.gz ${npkit_result_dir}/${hostname}
+done
